version: '3.9'

volumes:
  pgdata:
  static_files:
  media:
  schema:

networks:
  backend:
  frontend:


services:
  website:
    build: .
    env_file:
      - .env
    volumes:
      - static_files:/project/static
      - media:/project/media
      - schema:/project/swagger
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - backend
      - frontend

  postgresql:
    image: 'postgres:12'
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    networks:
      - backend

  nginx:
    image: 'nginx'
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/html/static
      - media:/var/www/media
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -f http://localhost' ]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s
    depends_on:
      - celery
      - redis
      - website
      - postgresql
    networks:
      - frontend

  redis:
    image: 'redis:7.0.0'
    networks:
      - backend
    depends_on:
      - website
      - postgresql

  celery:
    build:
      context: .
    volumes:
      - media:/project/media
    entrypoint: python -m celery -A project_orders worker -c 2
    depends_on:
      - redis
      - website
    networks:
      - backend
    env_file:
      - .env

  swagger:
    image: 'swaggerapi/swagger-ui'
    networks:
      - frontend
    environment:
      SWAGGER_JSON: /swagger/schema.yml
    volumes:
      - schema:/swagger:ro
    depends_on:
      nginx:
        condition: service_healthy
    ports:
     - '8080:8080'



